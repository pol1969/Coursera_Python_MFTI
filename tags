!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Car	sol_car.py	/^class Car(CarBase):$/;"	c
CarBase	sol_car.py	/^class CarBase:$/;"	c
Client	client.py	/^class Client:$/;"	c
Client	client_my.py	/^class Client:$/;"	c
ClientError	client.py	/^class ClientError(Exception):$/;"	c
ClientError	client_my.py	/^class ClientError(Exception):$/;"	c
ClientProtocolError	client.py	/^class ClientProtocolError(ClientError):$/;"	c
ClientServerProtocol	server.py	/^class ClientServerProtocol(asyncio.Protocol):$/;"	c
ClientSocketError	client.py	/^class ClientSocketError(ClientError):$/;"	c
File	fileobj.py	/^class File:$/;"	c
FileReader	solution.py	/^class FileReader:$/;"	c
SpecMachine	sol_car.py	/^class SpecMachine(CarBase):$/;"	c
Truck	sol_car.py	/^class Truck(CarBase):$/;"	c
Value	descriptor.py	/^class Value:$/;"	c
__add__	fileobj.py	/^    def __add__(self, obj):$/;"	m	class:File	file:
__get__	descriptor.py	/^    def __get__(self, obj, obj_type):$/;"	m	class:Value	file:
__init__	client.py	/^    def __init__(self, host, port, timeout=None):$/;"	m	class:Client
__init__	client_my.py	/^    def __init__(self, host, port, timeout=2):$/;"	m	class:Client
__init__	client_my.py	/^    def __init__(self, text):$/;"	m	class:ClientError
__init__	descriptor.py	/^    def __init__(self):$/;"	m	class:Value
__init__	fileobj.py	/^    def __init__(self, path):$/;"	m	class:File
__init__	sol_car.py	/^    def __init__(self, brand, photo_file_name, carrying):$/;"	m	class:CarBase
__init__	sol_car.py	/^    def __init__(self, brand, photo_file_name, carrying, body_whl):$/;"	m	class:Truck
__init__	sol_car.py	/^    def __init__(self, brand, photo_file_name, carrying, extra):$/;"	m	class:SpecMachine
__init__	sol_car.py	/^    def __init__(self, brand, photo_file_name, carrying, passenger_seats_count):$/;"	m	class:Car
__init__	solution.py	/^    def __init__(self, path):$/;"	m	class:FileReader
__iter__	fileobj.py	/^    def __iter__(self):$/;"	m	class:File	file:
__next__	fileobj.py	/^    def __next__(self):$/;"	m	class:File	file:
__repr__	sol_car.py	/^    def __repr__(self):$/;"	m	class:Car	file:
__repr__	sol_car.py	/^    def __repr__(self):$/;"	m	class:SpecMachine	file:
__repr__	sol_car.py	/^    def __repr__(self):$/;"	m	class:Truck	file:
__set__	descriptor.py	/^    def __set__(self, obj, value):$/;"	m	class:Value	file:
__str__	fileobj.py	/^    def __str__(self):$/;"	m	class:File	file:
_main	client.py	/^def _main():$/;"	f
_read	client.py	/^    def _read(self):$/;"	m	class:Client
args	decorator_prim.py	/^    args = parser.parse_args()$/;"	v
car_type	sol_car.py	/^    car_type = 'car'$/;"	v	class:Car
car_type	sol_car.py	/^    car_type = 'spec_machine'$/;"	v	class:SpecMachine
car_type	sol_car.py	/^    car_type = 'truck'$/;"	v	class:Truck
clear	decorator_prim.py	/^def clear():$/;"	f
close	client.py	/^    def close(self):$/;"	m	class:Client
connection_made	server.py	/^    def connection_made(self, transport):$/;"	m	class:ClientServerProtocol
coro	server.py	/^coro = loop.create_server($/;"	v
createParser	storage.py	/^def createParser():$/;"	f
data	storage.py	/^            data = json.load(f)$/;"	v
data	storage.py	/^            data =defaultdict(list)$/;"	v
data_received	server.py	/^    def data_received(self, data):$/;"	m	class:ClientServerProtocol
first	comfile.py	/^first = os.path.join(tempfile.gettempdir(), 'first')$/;"	v
get	client.py	/^    def get(self, key):$/;"	m	class:Client
get	client_my.py	/^    def get(self, key):$/;"	m	class:Client
get	decorator_prim.py	/^def get(key):$/;"	f
get_body_volume	sol_car.py	/^    def get_body_volume(self):$/;"	m	class:Truck
get_car_list	sol_car.py	/^def get_car_list(csv_filename):$/;"	f
get_data	decorator.py	/^def get_data():$/;"	f
get_data	decorator_prim.py	/^def get_data():$/;"	f
get_photo_file_ext	sol_car.py	/^    def get_photo_file_ext(self):$/;"	m	class:CarBase
inner	decorator.py	/^    def inner(*args, **kwargs ):$/;"	f	function:to_json
loop	server.py	/^loop = asyncio.get_event_loop()$/;"	v
namespace	storage.py	/^    namespace = parser.parse_args()$/;"	v
new_obj	comfile.py	/^new_obj = obj1 + obj2 $/;"	v
obj	comfile.py	/^obj = File(storage_path)$/;"	v
obj1	comfile.py	/^obj1 = File(first)$/;"	v
obj2	comfile.py	/^obj2 = File(second)$/;"	v
parse_data	client_my.py	/^    def parse_data(self,data):$/;"	m	class:Client
parser	decorator_prim.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	storage.py	/^    parser = createParser()$/;"	v
pid	pid.py	/^pid = os.getpid()$/;"	v
put	client.py	/^    def put(self, key, value, timestamp=None):$/;"	m	class:Client
put	client_my.py	/^    def put(self, key, value, timestamp=str(int(time.time()))):$/;"	m	class:Client
put	decorator_prim.py	/^def put(key, value):$/;"	f
read	fileobj.py	/^    def read(self):$/;"	m	class:File
read	solution.py	/^    def read(self):$/;"	m	class:FileReader
run	test_server.py	/^def run(host, port):$/;"	f
second	comfile.py	/^second = os.path.join(tempfile.gettempdir(),'second')$/;"	v
server	server.py	/^server = loop.run_until_complete(coro)$/;"	v
storage_path	comfile.py	/^storage_path = os.path.join(tempfile.gettempdir(),'storage.data')$/;"	v
storage_path	decorator_prim.py	/^storage_path = os.path.join(tempfile.gettempdir(), 'storage.data')$/;"	v
storage_path	storage.py	/^    storage_path = os.path.join(tempfile.gettempdir(), 'storage.data')$/;"	v
to_json	decorator.py	/^def to_json(func):$/;"	f
write	fileobj.py	/^    def write(self, content):$/;"	m	class:File
